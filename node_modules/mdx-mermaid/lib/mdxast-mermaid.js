"use strict";
/**
 * Copyright (c) Samuel Wall.
 *
 * This source code is licensed under the MIT license found in the
 * license file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const unist_util_visit_1 = __importDefault(require("unist-util-visit"));
/**
 * mdx-mermaid plugin.
 *
 * @param config Config passed in from parser.
 * @returns Function to transform mdxast.
 */
function plugin(config) {
    /**
     * Insert the component import into the document.
     * @param ast The document to insert into.
     */
    function insertImport(ast) {
        // See if there is already an import for the Mermaid component
        let importFound = false;
        unist_util_visit_1.default(ast, { type: 'import' }, (node) => {
            if (/\s*import\s*{\s*Mermaid\s*}\s*from\s*'mdx-mermaid\/Mermaid'\s*;?\s*/.test(node.value)) {
                importFound = true;
                return unist_util_visit_1.default.EXIT;
            }
        });
        // Add the Mermaid component import to the top
        if (!importFound) {
            ast.children.splice(0, 0, {
                type: 'import',
                value: 'import { Mermaid } from \'mdx-mermaid/Mermaid\';'
            });
        }
    }
    return function transformer(ast) {
        return __awaiter(this, void 0, void 0, function* () {
            // Find all the mermaid diagram code blocks. i.e. ```mermaid
            const instances = [];
            unist_util_visit_1.default(ast, { type: 'code', lang: 'mermaid' }, (node, index, parent) => {
                instances.push([node, index, parent]);
            });
            // If there are no code blocks return
            if (!instances.length) {
                // Look for any components
                unist_util_visit_1.default(ast, { type: 'jsx' }, (node, index, parent) => {
                    if (/.*<Mermaid.*/.test(node.value)) {
                        // If the component doesn't have config
                        if (typeof config !== 'undefined' && !/.*config={.*/.test(node.value)) {
                            const index = node.value.indexOf('<Mermaid') + 8;
                            node.value = node.value.substring(0, index) +
                                ` config={${JSON.stringify(config)}}` +
                                node.value.substring(index);
                        }
                        insertImport(ast);
                        return unist_util_visit_1.default.EXIT;
                    }
                });
                return ast;
            }
            let first = true;
            // Replace each Mermaid code block with the Mermaid component
            instances.forEach(([node, index, parent]) => {
                // Pass the config to the component
                let configString = '';
                if (first && typeof config !== 'undefined') {
                    first = false;
                    configString = ` config={${JSON.stringify(config)}}`;
                }
                parent.children.splice(index, 1, {
                    type: 'jsx',
                    value: `<Mermaid chart={\`${node.value}\`}${configString}/>`,
                    position: node.position
                });
            });
            insertImport(ast);
            return ast;
        });
    };
}
module.exports = plugin;
//# sourceMappingURL=mdxast-mermaid.js.map